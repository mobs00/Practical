import pandas as pd
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
# Load the dataset
data = pd.read_csv("C:\\Users\\windows 11\\Desktop\\Program\\documents\\IR\\emails.csv")

data

data.columns

# Remove 'Email No.' as it is not relevant
data = data.drop(columns=['Email No.'])
# Create a 'message' column by concatenating all word columns into a single string for each row
data['message'] = data.drop(columns=['Prediction']).apply(lambda x: ' '.join(x.astype(str)), axis=1)  # Added axis=1
# Assign the 'Prediction' column as the label
data = data[['Prediction', 'message']]
# Renaming for clarity
data.columns = ['label', 'message']
# Assign binary value to label, assuming 0 = ham, 1 = spam
data['label'] = data['label'].map({0: 0, 1: 1})
# Splitting data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(data['message'], data['label'], test_size=0.2, random_state=42)  # Added test_size value
# Feature extraction using TF-IDF Vectorizer
vectorizer = TfidfVectorizer(stop_words='english')
X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)
# Train the Naive Bayes Classifier
model = MultinomialNB()
model.fit(X_train_tfidf, y_train)  # Added missing fit() call
# Make Predictions
y_pred = model.predict(X_test_tfidf)
# Evaluate the Model
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')
print('\nClassification Report:')
print(classification_report(y_test, y_pred))
print('\nConfusion Matrix:')
print(confusion_matrix(y_test, y_pred))